		.INCLUDE "constants.mac"

		.LINK CREDITS_ADDR

		; Constants & system registers
		STD11           = 140
		REG_KB_STATUS   = 177660
		REG_KB_DATA     = 177662

		KB_POVT         = 1


CREDITS:
		MOV R5, MKDOSC
		MOV #1, STANDALONE

		TST R0
		BNE 3 ; Running standalone from MKDOS

		CLR STANDALONE


3:		; Enable keyboard
		MTPS #0
		BIC #100, @#REG_KB_STATUS
		MOV #KEYBOARD, @#274
		MOV @#274, @#60

		; Disable SMK pages
		MOV #6, @#SMKPAGE
		MOV #STD11, @#SMKPAGE
		MOV #0, @#SMKPAGE

		; Set 2nd screen page
		MOV #17400, @#SEL1
		MOV #140000, @#REG_SCR_PAGE
		MOV #3330, @#REG_SCR_SCRL

		; Clear screen
		MOV #20000, R0
		MOV #100000, R1
6:		CLR (R1)+
		SOB R0, 6


		; Set STOP handler
		TST STANDALONE
		BEQ 4
		; If running standalone on MKDOS, don't disable STOP
		MOV #EXIT, @#4
		BR CRSTART

4:		TST @#MKDOSC
		BEQ 5
		; If running on MKDOS, don't disable STOP
		MOV #4002, @#4
		BR CRSTART

5:		; Disable stop
		MOV #STOP, @#4
		BR CRSTART


STOP:	RTI

KEYBOARD:
		MOV R0, -(SP)

		CMP @#REG_KB_DATA, #KB_POVT
		BEQ POVT

		MOV (SP)+, R0
		RTI

POVT:	; POVT
		MOV #0, @#177712 ; stop CPU timer
		MOV #140000, @#REG_SCR_PAGE ; stop VSync timer
		MOV #16000, @#SEL1

		; Clear screen
		MOV #40000, R0
1:		CLRB 37777(R0)
		SOB R0, 1

		; Change page to demo
		MOV #6, @#SMKPAGE
		MOV #OZU11, @#SMKPAGE
		MOV #0, @#SMKPAGE

		TST STANDALONE
		BNE EXIT

		; Jump
		JMP @#140000

EXIT:	; Running standalone
		MOV #0, @#177712 ; stop CPU timer
		MOV #140000, @#REG_SCR_PAGE ; stop VSync timer

		; Change page to MKDOS
		MOV #6, @#SMKPAGE
		MOV #140, @#SMKPAGE
		MOV #0, @#SMKPAGE

		MOV #16000, @#SEL1

		JMP @#100000 ; MKDOS





CRSTART:
		MTPS #340 ; disable all interrupts
		MOV #REG_SCR_PAGE, R4 ; screen page and VSync timer
		MOV #140000, (R4) ; stop VSync timer
		MOV #VSYNC, @#100 ; set new VSync vector
		MOV #340, @#102 ; set new VSync vector


		MOV #125., @#177706 ; CPU timer initial value
		MOV #177712, R3 ; CPU timer register
		MOV #1, (R3) ; stop and init CPU timer
		MOV #177710, R5 ; CPU timer counter
		MTPS #0 ; enable all interrupts

		MOV #100000, R0
		MOV #IMAGE, R1
		MOV #PALS, R2
		MOV R2, CURLN

		MOV #100000, (R4) ; start VSync timer


1:		WAIT ; wait and then jump to VSYNC

WAIT_TIMER:
1:		TST (R5)
		BNE 1

2:		BIT #1, (R5) ; test timer value
		BNE 2
		             ; we've got 0 in lowest bit

		MOV (R2)+, (R4) ; change palette

3:		BIT #1, (R5) ; test timer value
		BEQ 3
		             ; we've got 1 in lowest bit
		BR 2


VSYNC:	MOV @#4, OLD4
		MOV #STOP, @#4

		MOV #1, (R3) ; copy initial value
		MOV #32, (R3) ; start CPU timer, allow looping

		; To scroll or not to scroll?
		MOV #1, R3
		XOR R3, VSNCID
		BNE 2
		JMP NOSCROLL

2:		; Scroll
		INC @#REG_SCR_SCRL

		; Loop screen
		BIC #40000, R0

		; Add next line
		CMP R1, #IMGEND
		BNE 1
		JMP IMGDRN

1:		; Clear zeroes
		MOV (R1)+, R2
		ASL R2
		MOV R2, R5
		SUB #100, R2
		NEG R2
		JMP PRFX(R2)

		; 32 CLRs
PRFX:	.REPEAT 40 {
			CLR (R0)+
		}

		; Show data
		MOV (R1)+, R2
		ASL R2
		ADD R2, R5
		; /R2 MOVs
		SUB #100, R2
		NEG R2
		JMP MID(R2)

		; 32 MOVs
MID:	.REPEAT 40 {
			MOV (R1)+, (R0)+
		}

		; Clear line
		; #40 - /R5 CLRs
		JMP SUFX(R5)

		; 32 CLRs
SUFX:	.REPEAT 40 {
			CLR (R0)+
		}

		MOV CURLN, R2 ; next palette row
		ADD #2, CURLN
		BR NOSCROLL1

NOSCROLL:
		MOV CURLN, R2 ; reset palettes

NOSCROLL1:
		MOV #WAIT_TIMER, (SP) ; return vector (PC)

		MOV (R2), (R4) ; set first line palette

		MOV #REG_SCR_PAGE, R4 ; screen page and VSync timer
		MOV #177712, R3 ; CPU timer register
		MOV #177710, R5 ; CPU timer counter

		MOV OLD4, @#4
		RTI

IMGDRN:	; Image drawn
		MOV #0, (R3) ; stop CPU timer
		MOV #140000, (R4) ; stop VSync timer
		MTPS #0 ; allow all interrupts
		MOV OLD4, @#4
		BR .


STANDALONE:
		.WORD 0
CURLN:	.WORD 0
VSNCID:	.WORD 0
MKDOSC:	.WORD 0
OLD4:	.WORD 0

PALS:	.REPEAT 256. - 1 {
			.WORD 140000
		}
		insert_file "credits.pal.bci"
IMAGE:	insert_file "credits.bci"
IMGEND:


		make_raw