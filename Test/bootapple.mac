		.LINK 1000
		.INCLUDE "constants.mac"

		; System registers
		REG_KB_STATUS   = 177660
		REG_KB_DATA     = 177662
		; MKDOS registers
		MKDOS_DEVTEK    = 120012 ; current partition id
		; Constants
		CATALOGUE       = 14000
		WAREA           = 12000
		PALETTE         = 0
		BLUE            = 1
		GREEN           = 2
		RED             = 3
		CHBLUE          = 21
		CHGREEN         = 22
		CHRED           = 23


BOOTAPPLE_START:
		; Clear screen
		MOV #20000, R0
		MOV #40000, R1
1:		CLR (R1)+
		SOB R0, 1


		; First volume
		MOV #MAINER, IFERR

		; Load file list
		CALL LOAD_CATALOGUE

		; Search files
		MOV #FILE1, R1
		MOV #46000, R2
		CALL SEARCH

		MOV #FILE2, R1
		MOV #47400, R2
		CALL SEARCH

		MOV #FILE3, R1
		MOV #51000, R2
		CALL SEARCH

		MOV #FILE4, R1
		MOV #52400, R2
		CALL SEARCH

		MOV #FILE5, R1
		MOV #54000, R2
		CALL SEARCH

		MOV #FILE6, R1
		MOV #55400, R2
		CALL SEARCH

		; Second volume
		MOV #OVLERR, IFERR

		CALL LOAD_CATALOGUE_2ND

		MOV #OVL1, R1
		MOV #57000, R2
		CALL SEARCH

		MOV #OVL2, R1
		MOV #60400, R2
		CALL SEARCH


		; Partition ID to char
		MOV #'A', R0
		ADD @#MKDOS_DEVTEK, R0
		MOVB R0, PARTITION

		TST ERROR
		BEQ 2

		; Jump to error
		CLR R0
		JMP @ERROR(R0)

2:		; All files found
		MOV #GREEN, COLOR
		MOV #HEADR1, R1
		MOV #65404, R2
		CALL PRINT_PARTITION

		MOV #GREEN, COLOR
		MOV #HEADR2, R1
		MOV #67004, R2
		CALL PRINT_PARTITION

		MOV #GREEN, COLOR
		MOV #HEADR3, R1
		MOV #70404, R2
		CALL PRINT_PARTITION

		MOV #GREEN, COLOR
		MOV #HEADR4, R1
		MOV #72004, R2
		CALL PRINT_PARTITION

		MOV #GREEN, COLOR
		MOV #HEADR5, R1
		MOV #73404, R2
		CALL PRINT_PARTITION


		MOV #100000, @#4 ; MKDOS
		MOV #INTRTI, @#274
		MOV #INTRTI, @#60


3:		BIT #200, @#REG_KB_STATUS ; Is any key pressed?
		BEQ 3

		CMP @#REG_KB_DATA, #12 ; Is it Enter?
		BNE 3

		; Add boot sector
		JMP ADD_BOOT_SECTOR

INTRTI:	RTI


PRINT_PARTITION:
		; Same as PRINT, but any appearence of @ in R1 with
		; PARTITION.
		MOV R1, -(SP)

1:		CMPB (R1), #'@' ; If it's @, replace
		BEQ 2
3:		CMPB (R1), #'&' ; If it's &, replace
		BEQ 4
		TSTB (R1)+ ; If it's not 0 char, continue
		BNE 1

		MOV (SP)+, R1
		CALL PRINT
		RET

2:		MOVB PARTITION, (R1) ; Replace and jump back
		BR 3
4:		MOVB PARTITION, (R1) ; Replace and jump back
		INCB (R1)
		BR 3

SEARCH:	; Search file R1, show results at R2
		ADD #16, R2

		MOV R1, -(SP)
		MOV R2, -(SP)
		MOV #BLUE, COLOR
		CALL PRINT
		MOV (SP)+, R2
		MOV (SP)+, R1

		CALL CHECK_FILE
		BCS 1
		; Ok
		MOV #FOUND, R1
		MOV #GREEN, COLOR
		BR 2

1:		; Error
		MOV #NFOUND, R1
		MOV #RED, COLOR

2:		; Print
		ADD #30, R2
		CALL PRINT

		RET


CHECK_FILE:
		; Check file R1 for existence, set C if not found,
		; clear if found.

		MOV #CATALOGUE + 502, R0 ; First filename

1:		; Compare strings R1 and R5
		MOV R0, R5
		MOV R1, R3
		MOV #16, R4
3:		CMPB (R5)+, (R3)+
		BNE 2
		SOB R4, 3

		BR 4

2:		; Check next file
		ADD #30, R0
		BPL 1

		; Error
		TST ERROR
		BNE 5
		MOV IFERR, ERROR
5:		SEC
		RET

4:		; No error
		CLC
		RET



LOAD_CATALOGUE:
		; Init working area
		MOV #WAREA, R3
		CALL @#160010 ; INITF

		MOV @#MKDOS_DEVTEK, 34(R3) ; UNIT

		; Load file list to CATALOGUE
		MOV #20., R1 ; length (blocks) -- HARDCODED
		SWAB R1
		; Now length in words to write to 0th block

		CLR R0 ; to read 0th block
		MOV #CATALOGUE, R2 ; address
		CALL @#160004 ; RWBLK

		RET


LOAD_CATALOGUE_2ND:
		; Init working area
		MOV #WAREA, R3

		INC 34(R3) ; UNIT

		; Load file list to CATALOGUE
		MOV #20., R1 ; length (blocks) -- HARDCODED
		SWAB R1
		; Now length in words to write to 0th block

		CLR R0 ; to read 0th block
		MOV #CATALOGUE, R2 ; address
		CALL @#160004 ; RWBLK

		RET


ADD_BOOT_SECTOR:
		; Clear old text
		MOV #64000, R0
		MOV #(100000 - 64000) / 2, R1
1:		CLR (R0)+
		SOB R1, 1

		CALL LOAD_CATALOGUE


		; Save file/block count
		MOV CATALOGUE + 30, R3
		MOV CATALOGUE + 32, R4

		; Copy bootloader to catalogue
		MOV #BOOTLOADER, R0
		MOV #200, R1
		MOV #CATALOGUE, R2
2:		MOV (R0)+, (R2)+
		SOB R1, 2

		; Restore file/block count
		MOV R3, CATALOGUE + 30
		MOV R4, CATALOGUE + 32

		; Write boot sector (and a few next sectors as well)
		MOV #-400, R1

		MOV #WAREA, R3
		CLR R0 ; Write 0th block
		MOV #CATALOGUE, R2 ; Address
		CALL @#160004 ; RWBLK
		TSTB 57(R3)
		BNE 3

		; Success
		MOV #GREEN, COLOR
		MOV #DONE, R1
		MOV #73404, R2
		CALL PRINT_PARTITION
		WAIT
		HALT

3:		; Error
		MOV 57(R3), R0
		CALL DECIM

		; Before error ID
		MOV #TERR, R0
		MOV #ERR1, R1
4:		MOVB (R1)+, (R0)+
		BNE 4

		; Error ID
		DEC R0
		MOV #NUMBER, R1
5:		MOVB (R1)+, (R0)+
		BNE 5

		; After error ID
		DEC R0
		MOV #ERR2, R1
6:		MOVB (R1)+, (R0)+
		BNE 6

		MOV #RED, COLOR
		MOV #TERR, R1
		MOV #73404, R2
		CALL PRINT_PARTITION
		WAIT
		HALT


MAINER:	; Error
		MOV #RED, COLOR
		MOV #ERROR1, R1
		MOV #70404, R2
		CALL PRINT_PARTITION

		MOV #RED, COLOR
		MOV #ERROR2, R1
		MOV #72004, R2
		CALL PRINT_PARTITION

		MOV #RED, COLOR
		MOV #ERROR3, R1
		MOV #73404, R2
		CALL PRINT_PARTITION

		HALT

OVLERR:	; Error
		MOV #RED, COLOR
		MOV #OVLER1, R1
		MOV #70404, R2
		CALL PRINT_PARTITION

		MOV #RED, COLOR
		MOV #OVLER2, R1
		MOV #72004, R2
		CALL PRINT_PARTITION

		MOV #RED, COLOR
		MOV #OVLER3, R1
		MOV #73404, R2
		CALL PRINT_PARTITION

		HALT


ERROR:	.WORD 0
IFERR:	.WORD 0
TERR:	.BLKB 50.

PARTITION:
		.BYTE 0

HEADR1:	.ASCIZ "You can run Good Apple demo without any DOS"
HEADR2:	.ASCII "by holding "
		.BYTE CHRED
		.BYTE '@'
		.BYTE CHGREEN
		.ASCIZ " while powering up your computer."
HEADR3:	.ASCII "Press "
		.BYTE CHBLUE
		.ASCII "Enter"
		.BYTE CHGREEN
		.ASCII " to make partition "
		.BYTE CHRED
		.ASCII "@:"
		.BYTE CHGREEN
		.ASCIZ " bootable,"
HEADR4:	.ASCII "or "
		.BYTE CHRED
		.ASCII "STOP"
		.BYTE CHGREEN
		.ASCIZ " to exit to DOS. Old boot sector will be"
HEADR5:	.ASCIZ "overwritten."

ERROR1:	.ASCIZ "Looks like some files are missing. Download"
ERROR2:	.ASCIZ "the full version of the demo from our site:"
ERROR3:	.BYTE CHGREEN
		.ASCIZ "http://thesands.ru/good-apple"

OVLER1:	.ASCII "Volume "
		.BYTE CHBLUE
		.ASCII "@:"
		.BYTE CHRED
		.ASCIZ " looks correct, however, OVL file is"
OVLER2:	.ASCII "missing from volume "
		.BYTE CHBLUE
		.ASCII "&:"
		.BYTE CHRED
		.ASCII ". Download file "
		.BYTE CHBLUE
		.ASCIZ "GoodApple.OVL"
OVLER3:	.ASCII "from our site: "
		.BYTE CHGREEN
		.ASCIZ "http://thesands.ru/good-apple"

DONE:	.ASCIZ "Done. Press any key to return to DOS."

ERR1:	.ASCIZ "Could not copy bootloader. Error #"
ERR2:	.ASCII ". Check "
		.BYTE CHBLUE
		.ASCII "README.TXT"
		.BYTE CHRED
		.ASCIZ " for possible reasons and fixes."

FILE1:	.ASCIZ "GoodApple.EXE "
FILE2:	.ASCIZ "GoodApple0.DAT"
FILE3:	.ASCIZ "GoodApple1.DAT"
FILE4:	.ASCIZ "CREDITS.EXE   "
FILE5:	.ASCIZ "README.TXT    "
FILE6:	.ASCIZ "BootApple.EXE "
OVL1:	.ASCIZ "GoodApple0.OVL"
OVL2:	.ASCIZ "GoodApple1.OVL"

FOUND:	.ASCIZ "found"
NFOUND:	.ASCIZ "not found"
		.EVEN






; Text library by Manwe / Sands

; decimal number output, R0: input number

DECIM:	MOV #NUMBER,R1	; pointer to output text string

		MOV #TEN,R5		; skip leading zeros
1:		CMP (R5)+,R0
		BHI 1			; branch if higher, for 16-bit not signed
		TST -(R5)		; if less then 10
		BEQ 4

2:		MOV #57,R4		; 0 symbol in ASCII codepage - 1
3:		INC R4			; count digits
		SUB (R5),R0
		BHIS 3			; branch if higher or same, for 16-bit not signed
		MOVB R4,(R1)+	; print R4

		ADD (R5)+,R0
		TST (R5)
		BNE 2

4:		ADD #60,R0		; 0 symbol in ASCII codepage
		MOVB R0,(R1)+	; print R0
		CLRB (R1)
		RET

TEN:	.WORD 10000.,1000.,100.,10.,0
NUMBER:	.ASCIZ "1234.5"
		.EVEN


COLOR:	.WORD 1		; 1 = yellow, 2 = pink, 3 = red

; R1 - text string address, R2 - screen address

PRINT:	BR FNTINI		; init font
		MOV COLOR,R0	; start pixel

TYPE:	MOVB (R1)+,R3	; get a leter
		BIC #177400, R3
		BNE 1			; if not the end of text
		RET

1:		CMP R3,#40		; if space symbol
		BEQ 3

		CMP R3,#20
		BLO 2
		CMP R3,#24
		BHIS 2

		; It's color change
		MOV R0,R5 ; Old pencil

		SUB #20,R3
		MOV R3,R0 ; New pencil

6:		CMP COLOR,R5 ; If pencil is same as color, break
		BEQ 7
		CLC
		ROR R5 ; Old pencil
		ASR R5
		ASL R0 ; New pencil
		ASL R0
		BR 6

7:		MOV R3,COLOR ; New color
		BR TYPE

;			BIC #177400,R3		; print usual symbol
;			CMP R3,#146			; symbol f
;			BNE 2
;				MOV R1,-(SP)	; save string pointer
;				MOV FONT+214,R1
;				CALL LETTER
;				MOV (SP)+,R1	; restore string pointer
;				ASR R0			; move penicl back
;				ASR R0
;				BNE TYPE
;					SUB #2,R2
;					MOV #140000,R0	; most right pixel in the word
;					BR TYPE			
2:			SUB #41,R3			; skip first 41 ASCII symbols
			ASL R3
			MOV R1,-(SP)		; save string pointer
			MOV FONT+2(R3),R1	; graphics address for this letter
			CALL LETTER
			MOV (SP)+,R1		; restore string pointer

		BR TYPE

3:		MOV #4,R4	; skip 4 pixels
		CLC
4:		ASL R0
		ASL R0
		BNE 5
			ADD #2,R2
			MOV COLOR,R0
5:		SOB R4,4
		BR TYPE

; init font

FNTINI:	MOV #FONT,R4	; font file address
		MOV (R4)+,R5	; number of letters in font
1:		ADD #FONT,(R4)+	; fix adresses in the table
		SOB R5,1
		MOV #240,PRINT	; NOP instead of init subroutine
		JMP PRINT+2

; draw a letter, shifted by N pixels (from 0 to 7)

LETTER:	MOV R2,R5		; save screen address
		MOV #100,R4
1:		MOV (R1)+,R3	; R1 = pointer to graphics
		BEQ 5
		CLC

2:		ROR R3			; draw a column of points
		BCC 3			; if zero skip next command
		BIS R0,(R2)		; draw a dot
3:		ADD R4,R2		; next row of the screen
		TST R3			; no more dots?
		BNE 2

4:		MOV R5,R2		; column is drawn, switch to next column
		ASL R0			; move pencil
		ASL R0
		BNE 1
		TST (R2)+		; increase screen address
		MOV COLOR,R0	; set pencil to the first point
		MOV R2,R5
		BR 1

5:		MOV R5,R2		; restore screen address
		ASL R0
		ASL R0
		BNE 6
		TST (R2)+		; move screen pointer to the right
		MOV COLOR,R0
6:		RET

FONT:	; number of letters, offset table (for each letter), graphics data

		insert_file "font-16b.raw"
		.EVEN


BOOTLOADER:
		.INCLUDE "bootloader.mac"

		make_bk0010_rom