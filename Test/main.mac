		.LINK 140000


		PALETTE = 15.


MAINSTART:
		; Move SEEK to high memory
		; R0 -- old SEEK
		TST @#HISEEK
		BNE 2

		MOV #HISEEK, R1
		MOV #256., R2
1:		MOV (R0)+, (R1)+
		SOB R2, 1
		MOV #HISEEK, @#SEEK

2:		MOV #1000, SP

		; Change page
		MOV #SMKPAGE, R0
		MOV #6, (R0)
		MOV #OZU11, (R0)
		MOV #0, (R0)

		; Change screen page
		MOV #17400, @#SEL1

		; Change palette
		MOV @#FIRST_PALETTE, R0
		ASL R0 ; aka MUL #400, R0
		ASL R0
		ASL R0
		ASL R0
		ASL R0
		ASL R0
		ASL R0
		ASL R0
		ADD #40000, R0
		MOV R0, @#REG_SCR_PAGE


		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; CONSTANTS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

		MOV @#TOTAL_HEADS, @#TOTAL_HEADS_COM
		COM @#TOTAL_HEADS_COM


		CALL @#LOADER

		; Set STOP handler
		MOV #LODCRD, @#4


		MOV #LOOPBACK_ADDRESS, @#LOOPBACK_ADDRESS
		CLR @#ZERO_ADDRESS


		; First word to the end
		MOV #BUFFER_OFFSET - 2, R0
		ADD #BUFFER_PER_SECTOR * 2, R0
		MOV R0, @#BUFFER_ADDRESSES

		MOV #BUFFER_OFFSET, R0
		MOV #BUFFER_ADDRESSES + 2, R1
		MOV #BUFFER_PER_SECTOR, R2
		DEC R2
3:		MOV R0, (R1)+
		ADD #2, R0
		SOB R2, 3


		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; CONSTANTS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

		; Seek to 48 KiB (96th block) and read till the end of the head
		MOV @#DATA0_BLOCK, R0
		MOV #0, R4
		CALL @#HISEEK
		; R0 contains sectors to read, R1 contains current head, R2 contains
		; current low cylinder and R3 contains current high cylinder now.

		COM R1
		COM R2
		COM R3
		MOV R1, @#T_REG_HEAD
		MOV R2, @#T_REG_CYL_LOW
		MOV R3, @#T_REG_CYL_HIGH
		COM R1

		MOV @#DATA0_SECTORS, @#SECDEC + 2
		INC @#SECDEC + 2

		MOV R0, @#NHEAD + 2
		INC @#NHEAD + 2

		MOV @#TOTAL_SECTORS, @#NHDUP1 + 2

		; MOV @#TOTAL_HEADS - R1, @#NCYLM + 2
		MOV @#TOTAL_HEADS, @#NCYLM + 2
		SUB R1, @#NCYLM + 2

		MOV @#TOTAL_HEADS, @#NCYL + 2

		MOV @#DATA0_SECTORS, @#SECTORS_LEFT
		SUB @#TOTAL_SECTORS, @#SECTORS_LEFT
		ADD R0, @#SECTORS_LEFT

		MOV #TODATA1, @#SDCJMP + 2


		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; DISK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

		; Init
		MOV #REG_DATA, R0
		MOV #LOOPBACK_ADDRESS + 2, R1
		MOV #SEL2, R2
		MOV #EMPTY_ADDRESS, R4
		MOV #BUFFER_OFFSET - 2, R5
		ADD #BUFFER_PER_SECTOR * 2, R5


RUN:	; Copy audio from buffer and then execute commands (see INSERT)

			MOV (R5)+, (R2)             ; MOV BUFFER_OFFSET+, @#SEL2 28.0

		MOV #BUFFER_OFFSET, R5 ; 28.0
		MOV #BUFFER_ADDRESSES, R3 ; 28.0


		; Check whether it's time to switch head
NHEAD:	DEC #1111 ; TOTAL_SECTORS + 1 20.0
		BEQ NHDUPD ; 12.0

			CMP @#NHEAD, @#NHEAD ; pause
			CMP -(PC), (PC)+ ; pause
			CMP @#NHEAD, @#NHEAD ; pause

			MOV (R5)+, (R2)             ; MOV BUFFER_OFFSET+, @#SEL2 28.0
			MOV -(R1), @(R1)+           ; MOV LOOPBACK_ADDRESS, @LOOPBACK_ADDRESS 34.0
			MOV -(R1), @(R1)+           ; MOV LOOPBACK_ADDRESS, @LOOPBACK_ADDRESS 34.0
			MOV -(R1), @(R1)+           ; MOV LOOPBACK_ADDRESS, @LOOPBACK_ADDRESS 34.0
			MOV -(R1), @(R1)+           ; MOV LOOPBACK_ADDRESS, @LOOPBACK_ADDRESS 34.0

			MOV (R5)+, (R2)             ; MOV BUFFER_OFFSET+, @#SEL2 28.0
			MOV -(R1), @(R1)+           ; MOV LOOPBACK_ADDRESS, @LOOPBACK_ADDRESS 34.0
			MOV -(R1), @(R1)+           ; MOV LOOPBACK_ADDRESS, @LOOPBACK_ADDRESS 34.0
			MOV -(R1), @(R1)+           ; MOV LOOPBACK_ADDRESS, @LOOPBACK_ADDRESS 34.0
			MOV -(R1), @(R1)+           ; MOV LOOPBACK_ADDRESS, @LOOPBACK_ADDRESS 34.0

			MOV (R5)+, (R2)             ; MOV BUFFER_OFFSET+, @#SEL2 28.0
			MOV -(R1), @(R1)+           ; MOV LOOPBACK_ADDRESS, @LOOPBACK_ADDRESS 34.0
			MOV -(R1), @(R1)+           ; MOV LOOPBACK_ADDRESS, @LOOPBACK_ADDRESS 34.0
			MOV -(R1), @(R1)+           ; MOV LOOPBACK_ADDRESS, @LOOPBACK_ADDRESS 34.0
			MOV -(R1), @(R1)+           ; MOV LOOPBACK_ADDRESS, @LOOPBACK_ADDRESS 34.0

			MOV (R5)+, (R2)             ; MOV BUFFER_OFFSET+, @#SEL2 28.0
			MOV -(R1), @(R1)+           ; MOV LOOPBACK_ADDRESS, @LOOPBACK_ADDRESS 34.0
			MOV -(R1), @(R1)+           ; MOV LOOPBACK_ADDRESS, @LOOPBACK_ADDRESS 34.0
			MOV -(R1), @(R1)+           ; MOV LOOPBACK_ADDRESS, @LOOPBACK_ADDRESS 34.0
			MOV -(R1), @(R1)+           ; MOV LOOPBACK_ADDRESS, @LOOPBACK_ADDRESS 34.0

			MOV (R5)+, (R2)             ; MOV BUFFER_OFFSET+, @#SEL2 28.0
			MOV -(R1), @(R1)+           ; MOV LOOPBACK_ADDRESS, @LOOPBACK_ADDRESS 34.0
			MOV -(R1), @(R1)+           ; MOV LOOPBACK_ADDRESS, @LOOPBACK_ADDRESS 34.0
			MOV -(R1), @(R1)+           ; MOV LOOPBACK_ADDRESS, @LOOPBACK_ADDRESS 34.0
			BR 1                        ; 12.0

1:		JMP SECT ; 23.0

		; Switch head
NHDUPD:	CLR (R4) ; 20.0

			CMP -(PC), (PC)+ ; pause
			MOV (R5)+, (R2)             ; MOV BUFFER_OFFSET+, @#SEL2 28.0

NHDUP1:	MOV #1111, @#NHEAD + 2 ; TOTAL_SECTORS 33.0

		; Check whether it's time to switch cylinder
NCYLM:	DEC #2222 ; TOTAL_HEADS 20.0
		BEQ NCYL ; 12.0

		DEC @#REG_HEAD ; next head 25.0

		MOV #376, @#REG_SECTOR ; switch to sector 1 33.0
		BR 1 ; 12.0

1:			MOV (R5)+, (R2)             ; MOV BUFFER_OFFSET+, @#SEL2 28.0

CL:		CMP @#SECTORS_LEFT, @#TOTAL_SECTORS
		BLO 2

		SUB @#TOTAL_SECTORS, @#SECTORS_LEFT
		MOV @#TOTAL_SECTORS, R0
		BR 3
2:		SUB @#ZERO_ADDRESS, @#SECTORS_LEFT
		MOV @#SECTORS_LEFT, R0
		BR 3

3:		COM R0
		BIC #1, R5

			MOV (R5)+, (R2)             ; MOV BUFFER_OFFSET+, @#SEL2 28.0

		MOV R0, @#REG_SECTOR_CNT
		MOV #REG_DATA, R0
		MOV #337, @#REG_CMD ; 33.0

			MOV -(R1), (R1)+            ; MOV LOOPBACK_ADDRESS, LOOPBACK_ADDRESS
			MOV -(R1), @(R1)+           ; MOV LOOPBACK_ADDRESS, @LOOPBACK_ADDRESS 34.0
			MOV (R5)+, (R2)             ; MOV BUFFER_OFFSET+, @#SEL2 28.0
			MOV -(R1), @(R1)+           ; MOV LOOPBACK_ADDRESS, @LOOPBACK_ADDRESS 34.0
			MOV -(R1), @(R1)+           ; MOV LOOPBACK_ADDRESS, @LOOPBACK_ADDRESS 34.0
			MOV -(R1), @(R1)+           ; MOV LOOPBACK_ADDRESS, @LOOPBACK_ADDRESS 34.0
			MOV -(R1), @(R1)+           ; MOV LOOPBACK_ADDRESS, @LOOPBACK_ADDRESS 34.0
			MOV (R5)+, (R2)             ; MOV BUFFER_OFFSET+, @#SEL2 28.0
			MOV -(R1), @(R1)+           ; MOV LOOPBACK_ADDRESS, @LOOPBACK_ADDRESS 34.0
			MOV -(R1), @(R1)+           ; MOV LOOPBACK_ADDRESS, @LOOPBACK_ADDRESS 34.0
			MOV -(R1), @(R1)+           ; MOV LOOPBACK_ADDRESS, @LOOPBACK_ADDRESS 34.0
			TSTB @#NHEAD                ; 23.0

		BR SECT ; 12.0

		; Switch cylinder
NCYL:	MOV #2222, @#NCYLM + 2 ; TOTAL_HEADS 33.0

			CMP @#NHEAD, @#NHEAD ; pause
			CMP @#NHEAD, @#NHEAD ; pause

			MOV (R5)+, (R2)             ; MOV BUFFER_OFFSET+, @#SEL2 28.0

		TSTB @#T_REG_CYL_LOW ; 23.0
		BNE 1 ; 12.0
		DEC @#T_REG_CYL_HIGH ; 25.0
		MOV @#T_REG_CYL_HIGH, @#REG_CYL_HIGH ; ~40 (?)

		MOV #377, @#REG_CYL_LOW ; 33.0

			MOV (R5)+, (R2)             ; MOV BUFFER_OFFSET+, @#SEL2 28.0

		MOV #377, @#T_REG_CYL_LOW ; 33.0

			TST (R5) ; 17.0
			TST (R5) ; 17.0
			TST (R5) ; 17.0
			TST (R5) ; 17.0
			TST (R5) ; 17.0
			TST (R5) ; 17.0
			TST (R5) ; 17.0

		BR 2 ; 12.0
1:		DEC @#T_REG_CYL_LOW ; cyl low 25.0
		MOV @#T_REG_CYL_LOW, @#REG_CYL_LOW ; ~40 (?)

			TST R0 ; 8.0
			TST R0 ; 8.0
			TST R0 ; 8.0
			TST R0 ; 8.0
			TST R0 ; 8.0
			TST R0 ; 8.0
			TST R0 ; 8.0
			TST R0 ; 8.0

			MOV (R5)+, (R2)             ; MOV BUFFER_OFFSET+, @#SEL2 28.0

			TST (R5) ; 17.0
			TST (R5) ; 17.0
			TST (R5) ; 17.0
			TST (R5) ; 17.0
			TST (R5) ; 17.0
			TST (R5) ; 17.0
			TST (R5) ; 17.0
			TST (R5) ; 17.0

2:		MOV #377, @#REG_HEAD ; head 33.0

			MOV (R5)+, (R2)             ; MOV BUFFER_OFFSET+, @#SEL2 28.0

		MOV #376, @#REG_SECTOR ; sector 33.0

TSC1:	CMP @#SECTORS_LEFT, @#TOTAL_SECTORS
		BLO 2

		SUB @#TOTAL_SECTORS, @#SECTORS_LEFT
		MOV @#TOTAL_SECTORS, R0
		BR 3
2:		SUB @#ZERO_ADDRESS, @#SECTORS_LEFT
		MOV @#SECTORS_LEFT, R0
		BR 3

3:		COM R0
		BIC #1, R5

			MOV (R5)+, (R2)             ; MOV BUFFER_OFFSET+, @#SEL2 28.0

		MOV R0, @#REG_SECTOR_CNT
		MOV #REG_DATA, R0
		MOV #337, @#REG_CMD ; 33.0

			MOV -(R1), (R1)+            ; MOV LOOPBACK_ADDRESS, LOOPBACK_ADDRESS
			TSTB @#NHEAD                ; 23.0

		BR SECT ; 12.0

		; Check whether it's time to show credits
SECT:		MOV (R5)+, (R2)             ; MOV BUFFER_OFFSET+, @#SEL2 28.0

SECDEC:	DEC #177777 ; DATA0_SECTORS + 1 20.0
		BEQ SDCJMP
		JMP @#BMANBG ; 12.0
SDCJMP:	JMP @#TODATA1


TODATA1:
		MOV R0, -(SP)
		MOV R1, -(SP)
		MOV R2, -(SP)
		MOV R3, -(SP)
		MOV R4, -(SP)
		MOV R5, -(SP)

		; Switch to 2nd file (DATA1)

3:		; Seek to next file and read till the end of the head
		MOV @#DATA1_BLOCK, R0
		MOV #0, R4
		CALL @#HISEEK
		; R0 contains sectors to read, R1 contains current head, R2 contains
		; current low cylinder and R3 contains current high cylinder now.

		COM R1
		COM R2
		COM R3
		MOV R1, @#T_REG_HEAD
		MOV R2, @#T_REG_CYL_LOW
		MOV R3, @#T_REG_CYL_HIGH
		COM R1

		MOV @#DATA1_SECTORS, @#SECDEC + 2

		MOV R0, @#NHEAD + 2

		MOV @#TOTAL_SECTORS, @#NHDUP1 + 2

		; MOV @#TOTAL_HEADS - R1, @#NCYLM + 2
		MOV @#TOTAL_HEADS, @#NCYLM + 2
		SUB R1, @#NCYLM + 2

		MOV @#TOTAL_HEADS, @#NCYL + 2

		MOV @#DATA1_SECTORS, @#SECTORS_LEFT
		SUB @#TOTAL_SECTORS, @#SECTORS_LEFT
		ADD R0, @#SECTORS_LEFT

		MOV (SP)+, R5
		MOV (SP)+, R4
		MOV (SP)+, R3
		MOV (SP)+, R2
		MOV (SP)+, R1
		MOV (SP)+, R0

		MOV #TOOVL0, @#SDCJMP + 2 ; OVL0

		JMP MAINBG


TOOVL0:
		MOV R0, -(SP)
		MOV R1, -(SP)
		MOV R2, -(SP)
		MOV R3, -(SP)
		MOV R4, -(SP)
		MOV R5, -(SP)

		; Switch to 2nd volume

		; Swap LD head/cylinder
		MOV @#LDHEAD, R0
		MOV @#LD2HEAD, @#LDHEAD
		MOV R0, @#LD2HEAD

		MOV @#LDCYL, R0
		MOV @#LD2CYL, @#LDCYL
		MOV R0, @#LD2CYL

3:		; Seek to 16 KiB (32th block) and read till the end of the head
		MOV @#OVL0_BLOCK, R0
		MOV #0, R4
		CALL @#HISEEK
		; R0 contains sectors to read, R1 contains current head, R2 contains
		; current low cylinder and R3 contains current high cylinder now.

		COM R1
		COM R2
		COM R3
		MOV R1, @#T_REG_HEAD
		MOV R2, @#T_REG_CYL_LOW
		MOV R3, @#T_REG_CYL_HIGH
		COM R1

		MOV @#OVL0_SECTORS, @#SECDEC + 2

		MOV R0, @#NHEAD + 2

		MOV @#TOTAL_SECTORS, @#NHDUP1 + 2

		; MOV @#TOTAL_HEADS - R1, @#NCYLM + 2
		MOV @#TOTAL_HEADS, @#NCYLM + 2
		SUB R1, @#NCYLM + 2

		MOV @#TOTAL_HEADS, @#NCYL + 2

		MOV @#OVL0_SECTORS, @#SECTORS_LEFT
		SUB @#TOTAL_SECTORS, @#SECTORS_LEFT
		ADD R0, @#SECTORS_LEFT

		MOV #1, @#IS_2ND_VOLUME

		MOV (SP)+, R5
		MOV (SP)+, R4
		MOV (SP)+, R3
		MOV (SP)+, R2
		MOV (SP)+, R1
		MOV (SP)+, R0

		MOV #TOOVL1, @#SDCJMP + 2

		JMP MAINBG

TOOVL1:
		MOV R0, -(SP)
		MOV R1, -(SP)
		MOV R2, -(SP)
		MOV R3, -(SP)
		MOV R4, -(SP)
		MOV R5, -(SP)

		; Switch to 2nd file (OVL1)

3:		; Seek to next file and read till the end of the head
		MOV @#OVL1_BLOCK, R0
		MOV #0, R4
		CALL @#HISEEK
		; R0 contains sectors to read, R1 contains current head, R2 contains
		; current low cylinder and R3 contains current high cylinder now.

		COM R1
		COM R2
		COM R3
		MOV R1, @#T_REG_HEAD
		MOV R2, @#T_REG_CYL_LOW
		MOV R3, @#T_REG_CYL_HIGH
		COM R1

		MOV @#OVL1_SECTORS, @#SECDEC + 2

		MOV R0, @#NHEAD + 2

		MOV @#TOTAL_SECTORS, @#NHDUP1 + 2

		; MOV @#TOTAL_HEADS - R1, @#NCYLM + 2
		MOV @#TOTAL_HEADS, @#NCYLM + 2
		SUB R1, @#NCYLM + 2

		MOV @#TOTAL_HEADS, @#NCYL + 2

		MOV @#OVL1_SECTORS, @#SECTORS_LEFT
		SUB @#TOTAL_SECTORS, @#SECTORS_LEFT
		ADD R0, @#SECTORS_LEFT

		MOV (SP)+, R5
		MOV (SP)+, R4
		MOV (SP)+, R3
		MOV (SP)+, R2
		MOV (SP)+, R1
		MOV (SP)+, R0

		MOV #LODCRD, @#SDCJMP + 2 ; Credits

		JMP MAINBG


BMANBG:	TST R0 ; 8.0
		TST R0 ; 8.0
		TST R0 ; 8.0
		TST R0 ; 8.0
		TST R0 ; 8.0
		TST R0 ; 8.0
		TST R0 ; 8.0
		TST R0 ; 8.0
		TST R0 ; 8.0
		TST R0 ; 8.0
		TST R0 ; 8.0
		TST R0 ; 8.0
		TST R0 ; 8.0

MAINBG: .REPEAT BUFFER_PER_SECTOR - 7 {
			; count 164.0
			MOV (R5)+, (R2)                                 ; MOV BUFFER_OFFSET+, @#SEL2 28.0
			.REPEAT AUDIO_EVERY {
				MOV -(R1), @(R1)+                           ; MOV LOOPBACK_ADDRESS, @LOOPBACK_ADDRESS 34.0
			}
		}


		; Wait for sector
1:		BIT #STATUS_DRQ, @#REG_CMD ; 31.0
		BNE 1 ; 12.0


		.REPEAT AUDIO_PER_VIDEO {
			; count 164.0
			MOV (R0), (R2)                                  ; MOV @#REG_DATA, @#SEL2 28.0
			.REPEAT AUDIO_EVERY {
				MOV (R0)+, @-(R0)                           ; MOV @#REG_DATA, @REG_DATA 34.0
			}
		}

		.REPEAT BUFFER_AUDIO_BLOCKS {
			; count 160.0
			MOV (R0), (R2)                                  ; MOV @#REG_DATA, @#SEL2 28.0
			.REPEAT AUDIO_EVERY {
				MOV (R0), @(R3)+                            ; MOV @#REG_DATA, BUFFER_OFFSET+ 33.0
			}
		}


		.REPEAT DATA_TAIL {
			MOV (R0), (R4)                                 ; MOV @#REG_DATA, EMPTY_ADDRESS 28.0
		}

		JMP @#RUN


LODCRD:	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; CREDITS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

		MOV @#MKDOS, R5

		; Flush HDD buffer
1:		BIT #STATUS_BSY, @#REG_CMD
		BEQ 1
		BIT #STATUS_DRQ, @#REG_CMD
		BNE 6
2:		TST @#REG_DATA
		BIT #STATUS_DRQ, @#REG_CMD
		BNE 1
		BIT #STATUS_BSY, @#REG_CMD
		BEQ 1
		BR 2

6:		; Fix LD heads/cylinders

		; If it's already first volume, skip
		TST @#IS_2ND_VOLUME
		BEQ 5
		CLR @#IS_2ND_VOLUME
		; Swap LD head
		MOV @#LDHEAD, R1
		MOV @#LD2HEAD, @#LDHEAD
		MOV R1, @#LD2HEAD
		; Swap LD cylinder
		MOV @#LDCYL, R1
		MOV @#LD2CYL, @#LDCYL
		MOV R1, @#LD2CYL

5:		; Clear 2nd screen page
		MOV #100000, R0
		MOV #20000, R1
0:		CLR (R0)+
		SOB R1, 0

		; Set 2nd screen page
		MOV #140000, @#REG_SCR_PAGE
		MOV #3330, @#REG_SCR_SCRL

		; Load from CREDITS_BLOCK (HDD) to CREDITS_ADDR (memory)
		MOV @#CREDITS_BLOCK, R0 ; from R0 (HDD)
		MOV #CREDITS_ADDR, R1 ; to R1 (memory)
		MOV #48., R2 ; R2 blocks

3:		MOV R0, -(SP)
		MOV R1, -(SP)
		MOV R2, -(SP)

		MOV #1, R4 ; read 1 block
		CALL @#HISEEK

		MOV (SP)+, R2
		MOV (SP)+, R1
		MOV (SP)+, R0
		INC R0 ; next block

		; Wait
7:		BIT #STATUS_BSY, @#REG_CMD
		BEQ 7

		; Read
		MOV #256., R3
4:		MOV @#REG_DATA, (R1)+
		SOB R3, 4

		SOB R2, 3

		; Mark as non-standalone run
		CLR R0
		; Jump
		JMP @#CREDITS_ADDR

BUFFER_ADDRESSES:
		.BLKW BUFFER_PER_SECTOR

HISEEK:
		.WORD 0
		.BLKW 777

LOADER:
		.INCLUDE "loader.mac"